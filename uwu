// console.log('hello, world!');

// declare our variable for our 2D array, score, row and columns.
let board;
let score = 0;
let rows = 4;
let columns = 4;
let is2048Exist = false;
let is4096Exist = false;
let is8192Exist = false;

// Create a function to set the game
// start of setGame()
function setGame(){
    //Initialize the 4x4 game board with all tiles set to 0.
    board = [
        [32, 8, 0, 0],
        [4, 128, 64, 256],
        [8, 32, 16, 2],
        [16, 2, 256, 1024]
    ];

    //Create the gameboard on the HTML document
    // 0 < 4
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < columns; c++) {
            // console.log(`[r${r}-c${c}]`);

            //create div element represent a tile
            let tile = document.createElement("div");

            // set a unique id for each tile based on its coordinate.
            // 2-3
            //"+" is use to concatenante values if dealing with strings
            tile.id = r.toString() + "-" + c.toString();

            // get the number from the board
            //wherein the board is currenly set to 0
            let num = board[r][c];

            // update the tiles appearance based on the value.
            updateTile(tile, num);

            // place the tile inside the grid (board), in the right row and column.
            document.getElementById("board").append(tile);
        }
    }

    //Random tile
    setTwo();
    setTwo();
}

//function should be invoke to execute the function
// setGame();
// end of setGame()

//start of updateTile()
function updateTile(tile, num){
    // clear the tile text
    tile.innerText = "";

    //clear the classList to avoid multiple classes
    tile.classList.value = "";

    // add class name "tile" to the classList of the tile, for the styling.
    tile.classList.add("tile");

    // to check if the current number is not zero
    if (num > 0) {
        // set the tile's text to the number based on the num value
        tile.innerText = num.toString();
        
        //example: num = 128, the class "x128" will be added to the tile.
        if (num <= 4096) {
            tile.classList.add("x" + num.toString());
        } else {
            // if number is greater than 4096, a special class "x8192" will be added
            tile.classList.add("x8192");
        }
    }

}
//end of update tile

// start of window.onload
// event that triggers when a webpage finished loading.
window.onload = function(){
    setGame();
}
// end of window.onload

// start of handleSlide()
// "e" represent the event object, which contains information about the event occured.
function handleSlide(e){
    //check the keydown event.
    console.log(e.code);

    //check if the pressed key's code is on of the arrow keys.
    if (["ArrowLeft","ArrowRight", "ArrowUp", "ArrowDown"].includes(e.code)) {
        
        // prevent default behavior, to avoid scrolling on keydown.
        e.preventDefault();

        // (=) assignment operator (to assign/change value of a variable), (==) to compare value from left to right are equal
        if (e.code == "ArrowLeft") {
            slideLeft();
            setTwo();
        } else if (e.code == "ArrowRight"){
            slideRight();
            setTwo();
        } else if (e.code == "ArrowUp"){
            slideUp();
            setTwo();
        } else if (e.code == "ArrowDown"){
            slideDown();
            setTwo();
        }
    }

    //use setTimeout to delay the alert

    setTimeout(() =>{
        if (hasLost) {
            alert('Game Over! You have lsot the game. Game will restart.');
            //reset game
            restartGame();
            alert('Press any arrow key to restart.');
        }
        checkWin();
    }, 100); //delay in milliseconds
}

//when any key is pressed, the handleSlide() is called to handle the key press.
document.addEventListener("keydown", handleSlide);
// end of handleSlide()

// start of filterZero(tiles)
// removing empty tiles
function filterZero(tiles){
    //create new array by removing zeroes
    return tiles.filter(num => num != 0);
}
// end of filterZero(tiles)

// start of slide()
// function for sliding and merging tiles
function slide(tiles){
    // [0, 2, 2, 2]
    // [2, 2, 2]
    tiles = filterZero(tiles);

    for (let i = 0; i < tiles.length; i++) {

        //if two adjacent numbers are equal
        // [2, 2, 2]
        // 0 1 2
        //tiles[0] == tiles[0+1]
        // 2 == 2
        if(tiles[i] == tiles[i+1]){
            //merge them by doubling the first one
            tiles[i] *= 2;
            //set the second one to zero
            tiles[i+1] = 0;
            //result = [2, 2, 2,] -> [4, 0, 2]
        }
    }

    // [4, 0, 2] -> [4, 2]
    tiles = filterZero(tiles);

    // add zeroes back
    while(tiles.length < 4){
        // add zero on the end of the array
        tiles.push(0);
        // [4, 2, 0, 0]
    }

    // [4, 2, 0, 0]
    return tiles;
}
//end of slide

//start of slideLeft()
function slideLeft(){
    for (let r = 0; r < rows; r++) {

        // store current row in the row variable
        let row = board[r]; // r = 0: [0, 2, 2, 2]
        
        //slide() function, it will return a new value for a specific row (merging of tiles)
        row = slide(row);

        // updated value in the board
        board[r] = row;

        for (let c = 0; c < columns; c++) {
            let tile = document.getElementById(r.toString() + "-" + c.toString());
            let num = board[r][c];
            updateTile(tile, num);
        }
    }
}
//end of slideLeft()

//start of slideRight
function slideRight(){
    for (let r = 0; r < rows; r++) {

        // store current row in the row variable
        let row = board[r]; // r = 0: [0, 2, 2, 2]
        
        // reverse the row array since it is sliding to right
        // e = 0: [0, 2, 2, 2] -> [2, 2, 2, 0]
        row.reverse();

        //slide() function, it will return a new value for a specific row (merging of tiles)
        row = slide(row); //[4, 2, 0, 0]

        row.reverse(); // [0, 0, 2, 4]

        // updated value in the board
        board[r] = row;

        for (let c = 0; c < columns; c++) {
            let tile = document.getElementById(r.toString() + "-" + c.toString());
            let num = board[r][c];
            updateTile(tile, num);
        }
    }
}
// end of slideRight

//start of slideUp()
function slideUp(){
    for (let c = 0; c < columns; c++) {

        //create a temporary array col that represents the column from top to bottom
        let col = [board[0][c], board[1][c], board[2][c], board[3][c]];

        col = slide(col);

        for (let r = 0; r < rows; r++) {
            // set the values of board array back to the values of the modified col.
            board[r][c] = col[r];

            let tile = document.getElementById(r.toString() + "-" + c.toString());
            let num = board[r][c];
            updateTile(tile, num);
        }
    }
}
//end of slideUp()

//start of slideDown()
function slideDown(){
    for (let c = 0; c < columns; c++) {

        //create a temporary array col that represents the column from top to bottom
        let col = [board[0][c], board[1][c], board[2][c], board[3][c]];

        col.reverse();

        col = slide(col);

        col.reverse();

        for (let r = 0; r < rows; r++) {
            // set the values of board array back to the values of the modified col.
            board[r][c] = col[r];

            let tile = document.getElementById(r.toString() + "-" + c.toString());
            let num = board[r][c];
            updateTile(tile, num);
        }
    }
}
//end of slideDown()

// start of hasEmptyTile()
//check whether game board contains any empty space (0) tiles.
//return a boolean value (true/false)
function hasEmptyTile(){
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < columns; c++) {
            //check if current tile === 0, if yes it will return true
            if(board[r][c] == 0){
                return true;
            }
        }
    }

    // no tile is zero
    return false;
}
// end of hasEmptyTile()

//start of setTwo()
// add a new random "2" tile in the game board
function setTwo(){
    //check if hasEmptyTile is false.
    if (!hasEmptyTile) {
        return;
    }

    // declare a value found tile
    let found = false;


    // this will run uuntil random empty tile is found
    while(!found){
        //Math.random() - generates random number base on the given condition
        //Math.floor() - rounds down to the nearest integer
        // to get a random value for r and c from 1-4
        let r = Math.floor(Math.random() * rows);
        let c = Math.floor(Math.random() * columns);

        // if the position values is 0, set the value to 2
        if(board[r][c] == 0){
            board[r][c] = 2;
            let tile = document.getElementById(r.toString() + "-" + c.toString())

            tile.innerText = "2";
            tile.classList.add("x2");

            //set the found variable to true
            found = true;
        }
    }


}
//end of setTwo()

// start of checkWin()
function checkWin(){
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < columns; c++) {
            //check if the current tile is winning tile
            if (board[r][c] == 2048 && is2048Exist == false) {
                alert('You win! You got 2048.');
                is2048Exist = true; // once 2048 already exist the alert message will only pop once
            } else if (board[r][c] == 4096 && is4096Exist == false) {
                alert('You are unstoppable at 4096! You are fantastically unstoppable');
                is4096Exist = true;
            }  else if (board[r][c] == 8192 && is8192Exist == false){
                alert('Victory! You have reached 8192! You are incredibly awesome!');
                is8192Exist = false;
            }
        }
    }
}
// end of checkWin()

//start of hasLost()
//check if the board is already full
function hasLost(){
    for(let r = 0; r < rows; r++){
        for (let c = 0; c < columns; c++) {
            //found an empty tile, user has not lost
            if(board[r][c] == 0){
                return false;
            }

            const  currentTile = board[r][c];

            //check if the adjacent (all directions) cells have possible merge
            if (r > 0 && board[r-1][c] === currentTile || r < rows - 1 &&
                board[r + 1][c] === currentTile || c > 0 && 
                board[r][c-1] === currentTile ||
                c < columns - 1 && board[r][c+1] === currentTile
            ) {
                //found adjacent cells with the same value, user has not lost
                return false;
            }
        }
    }

    // No possible moves left or empty tiles, user has lost
    return true;
}
//end of hasLost()

// start of restartGame()
// RestartGame by replacing all values into zero.
function restartGame(){
    board = [
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]
    ];
    
    setTwo();    // new tile   

}
// end of restartGame()